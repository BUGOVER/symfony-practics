<?php

declare(strict_types=1);

namespace App\Tests\Service;

use App\Exception\SubscriberAlreadyExistsException;
use App\Repository\SubscriberRepository;
use App\Request\SubscriberRequest;
use App\Service\SubscriberService;
use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\TestCase;

/**
 * @runTestsInSeparateProcesses
 */
class SubscriberServiceTest extends TestCase
{
    private SubscriberRepository $subscriberRepository;

    private EntityManagerInterface $entityManager;

    /**
     * @return void
     * @preserveGlobalState disabled
     */
    public function testSubscribeExceptionEmailAlreadyExists(): void
    {
        $this->expectException(SubscriberAlreadyExistsException::class);

        $request = new SubscriberRequest();
        $request->setEmail('fewyfewg@mail.com');

        $this->subscriberRepository
            ->expects(self::once())
            ->method('existsByEmail')
            ->with('fewyfewg@mail.com')
            ->willReturn(true);

        (new SubscriberService($this->subscriberRepository, $this->entityManager))
            ->subscribe($request);
    }

    /**
     * @return void
     * @preserveGlobalState disabled
     */
    public function testSubscribeSuccess(): void
    {
        $request = new SubscriberRequest();
        $request->setEmail('fewyfewg@mail.com');

        $this->subscriberRepository
            ->expects(self::once())
            ->method('existsByEmail')
            ->with('fewyfewg@mail.com')
            ->willReturn(false);

        (new SubscriberService($this->subscriberRepository, $this->entityManager))
            ->subscribe($request);
    }

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->subscriberRepository = $this->createMock(SubscriberRepository::class);
        $this->entityManager = $this->createMock(EntityManagerInterface::class);
    }
}
